[{"D:\\web_dev\\chessy\\client\\src\\hooks\\useAuth.js":"1","D:\\web_dev\\chessy\\client\\src\\components\\sideWindow\\SideWindow.js":"2","D:\\web_dev\\chessy\\client\\src\\components\\sideWindow\\UserInfo.js":"3","D:\\web_dev\\chessy\\client\\src\\components\\sideWindow\\ListElement.js":"4","D:\\web_dev\\chessy\\client\\src\\hooks\\useNotification.js":"5","D:\\web_dev\\chessy\\client\\src\\hooks\\useDialog.js":"6","D:\\web_dev\\chessy\\client\\src\\hooks\\useWebSocket.js":"7","D:\\web_dev\\chessy\\client\\src\\index.tsx":"8","D:\\web_dev\\chessy\\client\\src\\App.tsx":"9","D:\\web_dev\\chessy\\client\\src\\components\\DialogComponent.tsx":"10","D:\\web_dev\\chessy\\client\\src\\components\\NotificationComponent.tsx":"11","D:\\web_dev\\chessy\\client\\src\\components\\Board\\Game.tsx":"12","D:\\web_dev\\chessy\\client\\src\\components\\Board\\initalBoard.tsx":"13","D:\\web_dev\\chessy\\client\\src\\components\\Board\\MoveAlgo.tsx":"14","D:\\web_dev\\chessy\\client\\src\\components\\Board\\ChessIcons.tsx":"15","D:\\web_dev\\chessy\\client\\src\\components\\Board\\moveStone.tsx":"16","D:\\web_dev\\chessy\\client\\src\\components\\Board\\Square.tsx":"17","D:\\web_dev\\chessy\\client\\src\\components\\Board\\DangerOnKing.tsx":"18","D:\\web_dev\\chessy\\client\\src\\components\\Board\\Stone.tsx":"19","D:\\web_dev\\chessy\\client\\src\\components\\Board\\dangerOnStone.tsx":"20"},{"size":419,"mtime":1621887801288,"results":"21","hashOfConfig":"22"},{"size":11404,"mtime":1621945477651,"results":"23","hashOfConfig":"22"},{"size":5307,"mtime":1621945486437,"results":"24","hashOfConfig":"22"},{"size":3529,"mtime":1621344298729,"results":"25","hashOfConfig":"22"},{"size":539,"mtime":1621598935793,"results":"26","hashOfConfig":"22"},{"size":575,"mtime":1621756255647,"results":"27","hashOfConfig":"22"},{"size":469,"mtime":1621611552846,"results":"28","hashOfConfig":"22"},{"size":984,"mtime":1625209315552,"results":"29","hashOfConfig":"22"},{"size":16479,"mtime":1625208831838,"results":"30","hashOfConfig":"22"},{"size":943,"mtime":1625137813442,"results":"31","hashOfConfig":"22"},{"size":989,"mtime":1625137806796,"results":"32","hashOfConfig":"22"},{"size":9643,"mtime":1625142194750,"results":"33","hashOfConfig":"22"},{"size":5980,"mtime":1625138169102,"results":"34","hashOfConfig":"22"},{"size":10070,"mtime":1625138164721,"results":"35","hashOfConfig":"22"},{"size":446,"mtime":1625138187597,"results":"36","hashOfConfig":"22"},{"size":386,"mtime":1625137830470,"results":"37","hashOfConfig":"22"},{"size":1731,"mtime":1625208160623,"results":"38","hashOfConfig":"22"},{"size":1673,"mtime":1625138183566,"results":"39","hashOfConfig":"22"},{"size":1557,"mtime":1625137818655,"results":"40","hashOfConfig":"22"},{"size":4426,"mtime":1625138178852,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1i5cvl2",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"59"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"59"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"59"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"D:\\web_dev\\chessy\\client\\src\\hooks\\useAuth.js",[],["87","88"],"D:\\web_dev\\chessy\\client\\src\\components\\sideWindow\\SideWindow.js",[],"D:\\web_dev\\chessy\\client\\src\\components\\sideWindow\\UserInfo.js",[],"D:\\web_dev\\chessy\\client\\src\\components\\sideWindow\\ListElement.js",[],"D:\\web_dev\\chessy\\client\\src\\hooks\\useNotification.js",[],"D:\\web_dev\\chessy\\client\\src\\hooks\\useDialog.js",[],"D:\\web_dev\\chessy\\client\\src\\hooks\\useWebSocket.js",[],"D:\\web_dev\\chessy\\client\\src\\index.tsx",[],["89","90"],"D:\\web_dev\\chessy\\client\\src\\App.tsx",["91","92","93"],"D:\\web_dev\\chessy\\client\\src\\components\\DialogComponent.tsx",["94"],"import { useEffect, memo } from 'react';\r\n\r\nimport {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n} from '@material-ui/core';\r\nimport useDialog from '../hooks/useDialog';\r\n\r\nfunction DialogComponent() {\r\n    const { dialogState } = useDialog();\r\n\r\n    return (\r\n        <Dialog\r\n            open={dialogState.open}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                {dialogState.title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\">\r\n                    {dialogState.content}\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>{dialogState.actions}</DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\nexport default memo(DialogComponent);\r\n","D:\\web_dev\\chessy\\client\\src\\components\\NotificationComponent.tsx",[],"D:\\web_dev\\chessy\\client\\src\\components\\Board\\Game.tsx",["95","96","97","98","99"],"import { useState, useEffect, memo } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport initalData from \"./initalBoard\";\r\nimport { move } from \"./MoveAlgo\";\r\nimport Square from \"./Square\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport moveStone from \"./moveStone\";\r\nimport useDialog from \"../../hooks/useDialog\";\r\nimport useWebSocket from \"../../hooks/useWebSocket\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport { type } from \"./ChessIcons\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nconst Container = styled.div`\r\n  width: 400px; //for phone with 300 screen\r\n  height: 400px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nfunction displayBoard(board, player) {\r\n  if (player) return board;\r\n  const newBoard = board.reverse().map((e) => e.reverse().map((e) => e));\r\n  return newBoard;\r\n}\r\n\r\n//scan 8*8 cells   note this is for all board\r\nfunction initWhereStoneCanGo(board, player) {\r\n  //inializing stone position\r\n  if (!board) return \"\";\r\n  const initPos = {};\r\n  board.forEach((e, i) =>\r\n    e.forEach((x, j) => {\r\n      if (x.stone && x.stone.color === player) {\r\n        initPos[x.stone.id] = squareToGo(board, i, j);\r\n      }\r\n    })\r\n  );\r\n  return initPos;\r\n}\r\n\r\n//return list of one square where stone can go  note: this is for one square\r\nconst squareToGo = (board, i, j) => {\r\n  return move[board[i][j].stone.type](\r\n    board,\r\n    board[i][j].stone.color,\r\n    Number(i),\r\n    Number(j)\r\n  );\r\n};\r\n\r\nfunction handleSpicalCalse(\r\n  player,\r\n  board,\r\n  src_i,\r\n  src_j,\r\n  dest_i,\r\n  dest_j,\r\n  setDialog\r\n) {\r\n  const movedStone = board[src_i][src_j].stone;\r\n  if (\r\n    movedStone.type === \"king\" &&\r\n    ((player && src_j === \"4\") || (!player && src_j === \"3\")) &&\r\n    (dest_j === \"6\" || dest_j === \"1\")\r\n  ) {\r\n    //removing rook from prevoious positoin\r\n    const rook_dest_j = dest_j === \"6\" ? \"5\" : \"2\";\r\n    const rook_src_j = dest_j === \"6\" ? \"7\" : \"0\";\r\n    moveStone(board, 7, rook_src_j, 7, rook_dest_j);\r\n  }\r\n}\r\n\r\nfunction handleLog(setLogs, board, src_i, src_j, dest_i, dest_j) {\r\n  const src = board[src_i][src_j];\r\n  const dest = board[dest_i][dest_j];\r\n  if (!src.stone) return;\r\n  setLogs((prev) => [\r\n    ...prev,\r\n    `${src.stone.color ? \"white\" : \"black\"} ${src.stone.type} moved from ${\r\n      src.id\r\n    } to ${dest.id} ${\r\n      dest.stone\r\n        ? \"killed \" + (dest.stone.color ? \"white \" : \"black \") + dest.stone.type\r\n        : \"\"\r\n    }`,\r\n  ]);\r\n}\r\n\r\nfunction Game({\r\n  setLogs,\r\n  player,\r\n  mv,\r\n  setMv,\r\n  turn,\r\n  setTurn,\r\n  startGame,\r\n  setStartGame,\r\n}) {\r\n  const [board, setBoard] = useState(\"\");\r\n  const [selectedId, setSelectedId] = useState(\"\");\r\n  const [selected, setSelected] = useState(\"\");\r\n  const { setDialogState } = useDialog();\r\n  const { webSocket } = useWebSocket();\r\n  //scan the board and return a table of every stone with list of available square    stone --> where can go\r\n  const [whereStoneCanGo, setWhereStoneCanGo] = useState(\"\");\r\n  //varible --> key: id , value : [list of availabe square to go]\r\n  //this handle move after dragging the stone and clicking it\r\n  //TODO : adjust the j according to the player\r\n  const onDragStart = (result) => {\r\n    if (turn === \"wait\" || turn) {\r\n      const stoneId = result.draggableId;\r\n      if ((player && stoneId > 16) || (!player && stoneId <= 16))\r\n        setSelectedId(stoneId);\r\n    }\r\n  };\r\n\r\n  //handle select rock\r\n  //it remove the effect from the previous rock and add to the selected rock\r\n  const handleClick = (e, droppableId) => {\r\n    if (turn === \"wait\" || turn) {\r\n      const { rbdDragHandleDraggableId: stoneId } = e.target.dataset;\r\n      if ((player && stoneId > 16) || (!player && stoneId <= 16)) {\r\n        if (selected === e.target) {\r\n          selected.style = \"border:none\";\r\n          setSelected(\"\");\r\n          setSelectedId(\"\");\r\n        } else {\r\n          if (selected.style) selected.style = \"border:none\";\r\n          e.target.style = \"border:#00AFD7 2px solid\";\r\n          e.target.dataset.droppableId = droppableId;\r\n          setSelected(e.target);\r\n          setSelectedId(stoneId);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param {Object} result dnd returned value\r\n   * @param {Object} result.destination\r\n   * @param {string} result.destination.droppableId\r\n   * @param {Object} result.source\r\n   * @param {string} result.source.droppableId\r\n   */\r\n  const onDragEnd = (result) => {\r\n    const { destination, source } = result;\r\n    if (!destination) return;\r\n    if (destination.droppableId === source.droppableId) return;\r\n    const [src_i, src_j] = source.droppableId.split(\",\");\r\n    const [dest_i, dest_j] = destination.droppableId.split(\",\");\r\n    const movedStone = board[src_i][src_j].stone;\r\n\r\n    const newState = board.map((e) => e.map((e2) => ({ ...e2 })));\r\n\r\n    handleSpicalCalse(player, newState, src_i, src_j, dest_i, dest_j);\r\n\r\n    moveStone(newState, src_i, src_j, dest_i, dest_j);\r\n\r\n    setBoard(newState);\r\n    if (selected) selected.style = \"border:none\";\r\n    setSelectedId(\"\");\r\n    handleLog(setLogs, board, src_i, src_j, dest_i, dest_j);\r\n    if (turn !== \"wait\") setTurn(false);\r\n\r\n    const move = {\r\n      src: { i: src_i, j: src_j },\r\n      dest: { i: dest_i, j: dest_j },\r\n    };\r\n    \r\n    webSocket.send(\r\n      JSON.stringify({\r\n        msg: \"move\",\r\n        //TODO: change this to move{src:{i,j},dest:{i,j}}\r\n        move,\r\n      })\r\n    );\r\n    if (dest_i === \"0\" && movedStone.type === \"pawn\") {\r\n      setDialogState({\r\n        open: true,\r\n        title: \"replace with\",\r\n        content: (\r\n          <>\r\n            {[\"queen\", \"rook\", \"knight\", \"bishop\", \"pawn\"].map((e) => (\r\n              <IconButton\r\n                onClick={() => {\r\n                  setBoard((prev) => {\r\n                    const newState = [...prev];\r\n                    newState[dest_i][dest_j].stone.type = e;\r\n                    return newState;\r\n                  });\r\n                  setDialogState({\r\n                    open: false,\r\n                    content: \"\",\r\n                  });\r\n                }}\r\n              >\r\n                <Icon icon={type[e]} />\r\n              </IconButton>\r\n            ))}\r\n          </>\r\n        ),\r\n      });\r\n    }\r\n\r\n    return;\r\n  };\r\n\r\n  //to unSelect the selected rock when clicking outside and inside component\r\n  useEffect(() => {\r\n    function removeSelect(event) {\r\n      let rbdDroppableId = event.target.dataset.rbdDroppableId;\r\n      if (!rbdDroppableId)\r\n        rbdDroppableId =\r\n          event.target.parentElement.parentElement.dataset.rbdDroppableId;\r\n\r\n      if (selected && rbdDroppableId) {\r\n        const { i: src_i, j: src_j } = selected.dataset;\r\n        const [, , dest_id] = rbdDroppableId.split(\",\");\r\n        selected.style = \"border:none\";\r\n        const stoneToMove = board[src_i][src_j].stone;\r\n        if (whereStoneCanGo[stoneToMove.id].includes(dest_id)) {\r\n          const result = {\r\n            destination: {\r\n              droppableId: rbdDroppableId,\r\n            },\r\n            source: {\r\n              droppableId: `${src_i},${src_j},${stoneToMove.id}`,\r\n            },\r\n          };\r\n          onDragEnd(result);\r\n        } else {\r\n          selected.style = \"border:none\";\r\n          setSelected(\"\");\r\n          setSelectedId(\"\");\r\n        }\r\n      }\r\n    }\r\n\r\n    document.addEventListener(\"mousedown\", removeSelect);\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", removeSelect);\r\n    };\r\n  }, [selected]);\r\n\r\n  //connect with server logic\r\n  useEffect(() => {\r\n    if (mv) {\r\n      const { src_i, src_j, dest_i, dest_j } = mv;\r\n      handleLog(setLogs, board, 7 - src_i, 7 - src_j, 7 - dest_i, 7 - dest_j);\r\n      const newState = board.map((e) => e.map((e2) => ({ ...e2 })));\r\n      moveStone(newState, 7 - src_i, 7 - src_j, 7 - dest_i, 7 - dest_j);\r\n      setBoard(newState);\r\n      setTurn(true);\r\n    }\r\n  }, [mv]);\r\n\r\n  // check if play lose\r\n  useEffect(() => {\r\n    let c = Object.keys(whereStoneCanGo).length !== 0 && true;\r\n    for (const key in whereStoneCanGo) {\r\n      if (Object.hasOwnProperty.call(whereStoneCanGo, key)) {\r\n        const element = whereStoneCanGo[key];\r\n        if (element.length !== 0) {\r\n          c = false;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (c) {\r\n      webSocket.send(JSON.stringify({ msg: \"lose\" }));\r\n      setLogs((prev) => [...prev, \"PLAYER ONE LOSS\"]);\r\n    }\r\n  }, [setLogs, whereStoneCanGo]);\r\n\r\n  useEffect(() => {\r\n    if (startGame) {\r\n      setBoard(displayBoard(initalData, player));\r\n      setStartGame(false);\r\n    }\r\n  }, [startGame]);\r\n\r\n  useEffect(() => {\r\n    setBoard(displayBoard(initalData, player));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setWhereStoneCanGo(initWhereStoneCanGo(board, player));\r\n  }, [board, player]);\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd} onDragStart={onDragStart}>\r\n      <Container>\r\n        {board &&\r\n          board.map((e, i) =>\r\n            e.map((e, j) => {\r\n              return (\r\n                <Square\r\n                  isDropDisabled={\r\n                    selectedId && whereStoneCanGo[selectedId]\r\n                      ? !whereStoneCanGo[selectedId].includes(e.id)\r\n                      : true\r\n                  } //allow drag if the square is included\r\n                  handleClick={handleClick}\r\n                  white={e.color}\r\n                  id={e.id}\r\n                  key={e.id}\r\n                  i={i}\r\n                  j={j}\r\n                  stone={e.stone ? e.stone : null}\r\n                />\r\n              );\r\n            })\r\n          )}\r\n      </Container>\r\n    </DragDropContext>\r\n  );\r\n}\r\nexport default memo(Game);\r\n","D:\\web_dev\\chessy\\client\\src\\components\\Board\\initalBoard.tsx",[],"D:\\web_dev\\chessy\\client\\src\\components\\Board\\MoveAlgo.tsx",["100"],"import dangerOnKing from './DangerOnKing';\r\n\r\n// this function have the whole buisness of moving the stones\r\n\r\n//utilities\r\nfunction range(i, j) {\r\n    return i >= 0 && j >= 0 && i < 8 && j < 8;\r\n}\r\n\r\n/**\r\n * if function return:\r\n * 1- means it is not inside the range\r\n * 2- it inside the range but the square is not empty\r\n * 3- the square where it will go is friend\r\n * 4- the square where it will go is opponent\r\n * return the state of the square\r\n */\r\n\r\n//take board:board state,stoneColor:stone color, i: y axis of stone , j : x axis of stone.\r\n\r\nfunction checkToGo(board, stoneColor, i, j) {\r\n    if (!range(i, j)) return 1;\r\n    if (!board[i][j].stone) return 2;\r\n    if (board[i][j].stone.color === stoneColor) return 3;\r\n    return 4;\r\n}\r\n//Note : there is better approch to make it less coupling but I thought this will be faster,\r\n// instead of passing the val we could return array and then adding the returned value to the array which may take more operation\r\nfunction addVertical(board, stoneColor, val, i, j) {\r\n    for (let k = i + 1; k < 8; k++) {\r\n        const pass = checkToGo(board, stoneColor, k, j);\r\n        if (\r\n            pass === options['friend'] ||\r\n            pass === options['outOfRange'] ||\r\n            dangerOnKing(board, i, j, k, j)\r\n        )\r\n            break;\r\n        val.push(board[k][j].id);\r\n        if (pass === options['opponent']) break;\r\n    }\r\n    for (let k = i - 1; k >= 0; k--) {\r\n        const pass = checkToGo(board, stoneColor, k, j);\r\n        if (\r\n            pass === options['friend'] ||\r\n            pass === options['outOfRange'] ||\r\n            dangerOnKing(board, i, j, k, j)\r\n        )\r\n            break;\r\n        val.push(board[k][j].id);\r\n        if (pass === options['opponent']) break;\r\n    }\r\n}\r\n\r\nfunction addHorizontal(board, stoneColor, val, i, j) {\r\n    for (let k = j + 1; k < 8; k++) {\r\n        const pass = checkToGo(board, stoneColor, i, k);\r\n        if (\r\n            pass === options['friend'] ||\r\n            pass === options['outOfRange'] ||\r\n            dangerOnKing(board, i, j, i, k)\r\n        )\r\n            break;\r\n        val.push(board[i][k].id);\r\n        if (pass === options['opponent']) break;\r\n    }\r\n    for (let k = j - 1; k >= 0; k--) {\r\n        const pass = checkToGo(board, stoneColor, i, k);\r\n        if (\r\n            pass === options['friend'] ||\r\n            pass === options['outOfRange'] ||\r\n            dangerOnKing(board, i, j, i, k)\r\n        )\r\n            break;\r\n        val.push(board[i][k].id);\r\n        if (pass === options['opponent']) break;\r\n    }\r\n}\r\n\r\nfunction addDiagonal(board, stoneColor, val, i, j) {\r\n    for (let a = i + 1, b = j + 1; a < 8 && b < 8; a++, b++) {\r\n        const pass = checkToGo(board, stoneColor, a, b);\r\n        if (\r\n            pass === options['friend'] ||\r\n            pass === options['outOfRange'] ||\r\n            dangerOnKing(board, i, j, a, b)\r\n        )\r\n            break;\r\n        val.push(board[a][b].id);\r\n        if (pass === options['opponent']) break;\r\n    }\r\n    for (let a = i - 1, b = j - 1; a >= 0 && b >= 0; a--, b--) {\r\n        const pass = checkToGo(board, stoneColor, a, b);\r\n        if (\r\n            pass === options['friend'] ||\r\n            pass === options['outOfRange'] ||\r\n            dangerOnKing(board, i, j, a, b)\r\n        )\r\n            break;\r\n        val.push(board[a][b].id);\r\n        if (pass === options['opponent']) break;\r\n    }\r\n}\r\nfunction addAntiDiagonal(board, stoneColor, val, i, j) {\r\n    for (let a = i - 1, b = j + 1; a >= 0 && b < 8; a--, b++) {\r\n        const pass = checkToGo(board, stoneColor, a, b);\r\n        if (\r\n            pass === options['friend'] ||\r\n            pass === options['outOfRange'] ||\r\n            dangerOnKing(board, i, j, a, b)\r\n        )\r\n            break;\r\n        val.push(board[a][b].id);\r\n        if (pass === options['opponent']) break;\r\n    }\r\n    for (let a = i + 1, b = j - 1; a < 8 && b >= 0; a++, b--) {\r\n        const pass = checkToGo(board, stoneColor, a, b);\r\n        if (\r\n            pass === options['friend'] ||\r\n            pass === options['outOfRange'] ||\r\n            dangerOnKing(board, i, j, a, b)\r\n        )\r\n            break;\r\n        val.push(board[a][b].id);\r\n        if (pass === options['opponent']) break;\r\n    }\r\n}\r\n//this object work with check to go function in order to specifiy why function has been violated\r\nconst options = {\r\n    outOfRange: 1,\r\n    empty: 2,\r\n    friend: 3,\r\n    opponent: 4,\r\n};\r\n/*------------object of functions for every stone------------------ */\r\n//take position of stone and\r\n//return list of square Where stone can go\r\n\r\nexport const move = {\r\n    king: (board, stoneColor, i, j) => {\r\n        const val = [];\r\n        //special case for king\r\n        //TODO : allow it if the king in the first move\r\n        if (\r\n            (stoneColor && i === 7 && j === 4) ||\r\n            (!stoneColor && i === 7 && j === 3)\r\n        ) {\r\n            let control = true;\r\n            //right flip\r\n            if (\r\n                checkToGo(board, stoneColor, 7, 7) === 3 &&\r\n                board[7][7].stone.type === 'rook'\r\n            ) {\r\n                for (let k = j + 1; k < 6; k++)\r\n                    if (board[i][k].stone) {\r\n                        control = false;\r\n                        break;\r\n                    }\r\n                if (control && !dangerOnKing(board, i, j, i, 6))\r\n                    val.push(board[i][6].id);\r\n            }\r\n\r\n            //left flip\r\n            control = true;\r\n            if (\r\n                checkToGo(board, stoneColor, 7, 0) === 3 &&\r\n                board[7][0].stone.type === 'rook'\r\n            ) {\r\n                for (let k = j - 1; k >= 1; k--)\r\n                    if (board[i][k].stone) {\r\n                        control = false;\r\n                        break;\r\n                    }\r\n                if (control && !dangerOnKing(board, i, j, i, 1))\r\n                    val.push(board[i][1].id);\r\n            }\r\n        }\r\n\r\n        [\r\n            [-1, -1],\r\n            [-1, 0],\r\n            [-1, 1],\r\n            [0, 1],\r\n            [1, 1],\r\n            [1, 0],\r\n            [1, -1],\r\n            [0, -1],\r\n        ].forEach((e) => {\r\n            const [iTarget, jTarget] = e;\r\n            const pass = checkToGo(board, stoneColor, i + iTarget, j + jTarget);\r\n\r\n            if (\r\n                (pass === options['empty'] || pass === options['opponent']) &&\r\n                !dangerOnKing(board, i, j, i + iTarget, j + jTarget)\r\n            )\r\n                val.push(board[i + iTarget][j + jTarget].id);\r\n        });\r\n        return val;\r\n    },\r\n    queen: (board, stoneColor, i, j) => {\r\n        const val = [];\r\n        addVertical(board, stoneColor, val, i, j);\r\n        addHorizontal(board, stoneColor, val, i, j);\r\n        addDiagonal(board, stoneColor, val, i, j);\r\n        addAntiDiagonal(board, stoneColor, val, i, j);\r\n        return val;\r\n    },\r\n    rook: (board, stoneColor, i, j) => {\r\n        const val = [];\r\n        addVertical(board, stoneColor, val, i, j);\r\n        addHorizontal(board, stoneColor, val, i, j);\r\n        return val;\r\n    },\r\n    bishop: (board, stoneColor, i, j) => {\r\n        const val = [];\r\n        addDiagonal(board, stoneColor, val, i, j);\r\n        addAntiDiagonal(board, stoneColor, val, i, j);\r\n        return val;\r\n    },\r\n    /**\r\n     *\r\n     * @param {Array(Array)} board\r\n     * @param {Number} i\r\n     * @param {Number} j\r\n     * @param {boolean} stoneColor\r\n     */\r\n    knight: (board, stoneColor, i, j) => {\r\n        const val = [];\r\n        [\r\n            [-2, -1],\r\n            [-2, 1],\r\n            [2, -1],\r\n            [2, 1],\r\n        ].forEach((e) => {\r\n            //it is not just for pos it is 8 but we could reverse i and j to get the other one\r\n            const [iTarget, jTarget] = e;\r\n            let pass = checkToGo(board, stoneColor, i + iTarget, j + jTarget);\r\n\r\n            if (\r\n                (pass === options['empty'] || pass === options['opponent']) &&\r\n                !dangerOnKing(board, i, j, i + iTarget, j + jTarget) &&\r\n                range(i + iTarget, j + jTarget)\r\n            )\r\n                val.push(board[i + iTarget][j + jTarget].id);\r\n            pass = checkToGo(board, stoneColor, i + jTarget, j + iTarget);\r\n\r\n            if (\r\n                (pass === options['empty'] || pass === options['opponent']) &&\r\n                !dangerOnKing(board, i, j, i + jTarget, j + iTarget) &&\r\n                range(i + jTarget, j + iTarget)\r\n            )\r\n                val.push(board[i + jTarget][j + iTarget].id);\r\n        });\r\n        return val;\r\n    },\r\n    //as pawn moves is affected by stone player color we have to handle this use\r\n    pawn: (board, stoneColor, i, j) => {\r\n        if (!board[i][j].stone) return [];\r\n        const val = [];\r\n        const pawnMove = stoneColor ? 1 : -1;\r\n        //check if stone could eat the oppoenet in the upper right\r\n        if (\r\n            checkToGo(board, stoneColor, i - 1, j - 1) ===\r\n                options['opponent'] &&\r\n            !dangerOnKing(board, i, j, i - 1, j - 1)\r\n        )\r\n            val.push(board[i - 1][j - 1].id);\r\n        //if stone could eat the oppoent in the upper left\r\n        if (\r\n            checkToGo(board, stoneColor, i - 1, j + 1) ===\r\n                options['opponent'] &&\r\n            !dangerOnKing(board, i, j, i - 1, j + 1)\r\n        )\r\n            val.push(board[i - 1][j + 1].id);\r\n\r\n        //two jump of one jump for pawn\r\n        if (\r\n            checkToGo(board, stoneColor, i - 1, j) === options['empty'] &&\r\n            !dangerOnKing(board, i, j, i - 1, j)\r\n        ) {\r\n            val.push(board[i - 1][j].id);\r\n            if (\r\n                Number(i) === 6 &&\r\n                checkToGo(board, stoneColor, i - 2, j) === options['empty'] &&\r\n                !dangerOnKing(board, i, j, i - 2, j)\r\n            )\r\n                val.push(board[i - 2][j].id);\r\n        }\r\n\r\n        return val;\r\n    },\r\n    //just the pawn pace's moves have constraints with color note that this constraints are just for pawn\r\n};\r\n","D:\\web_dev\\chessy\\client\\src\\components\\Board\\ChessIcons.tsx",[],"D:\\web_dev\\chessy\\client\\src\\components\\Board\\moveStone.tsx",[],"D:\\web_dev\\chessy\\client\\src\\components\\Board\\Square.tsx",[],"D:\\web_dev\\chessy\\client\\src\\components\\Board\\DangerOnKing.tsx",[],"D:\\web_dev\\chessy\\client\\src\\components\\Board\\Stone.tsx",[],"D:\\web_dev\\chessy\\client\\src\\components\\Board\\dangerOnStone.tsx",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":26,"column":18,"nodeType":"107","messageId":"108","endLine":26,"endColumn":29},{"ruleId":"109","severity":1,"message":"110","line":221,"column":8,"nodeType":"111","endLine":221,"endColumn":28,"suggestions":"112"},{"ruleId":"109","severity":1,"message":"113","line":253,"column":8,"nodeType":"111","endLine":253,"endColumn":10,"suggestions":"114"},{"ruleId":"105","severity":1,"message":"115","line":1,"column":10,"nodeType":"107","messageId":"108","endLine":1,"endColumn":19},{"ruleId":"109","severity":1,"message":"116","line":244,"column":6,"nodeType":"111","endLine":244,"endColumn":16,"suggestions":"117"},{"ruleId":"109","severity":1,"message":"118","line":256,"column":6,"nodeType":"111","endLine":256,"endColumn":10,"suggestions":"119"},{"ruleId":"109","severity":1,"message":"120","line":274,"column":6,"nodeType":"111","endLine":274,"endColumn":32,"suggestions":"121"},{"ruleId":"109","severity":1,"message":"122","line":281,"column":6,"nodeType":"111","endLine":281,"endColumn":17,"suggestions":"123"},{"ruleId":"109","severity":1,"message":"124","line":285,"column":6,"nodeType":"111","endLine":285,"endColumn":8,"suggestions":"125"},{"ruleId":"105","severity":1,"message":"126","line":259,"column":15,"nodeType":"107","messageId":"108","endLine":259,"endColumn":23},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"@typescript-eslint/no-unused-vars","'mobileCheck' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setDialogState', 'setNoti', 'setUser', and 'webSocket'. Either include them or remove the dependency array.","ArrayExpression",["129"],"React Hook useEffect has missing dependencies: 'setUser' and 'webSocket'. Either include them or remove the dependency array.",["130"],"'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'board', 'onDragEnd', and 'whereStoneCanGo'. Either include them or remove the dependency array.",["131"],"React Hook useEffect has missing dependencies: 'board', 'setLogs', and 'setTurn'. Either include them or remove the dependency array. If 'setTurn' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["132"],"React Hook useEffect has a missing dependency: 'webSocket'. Either include it or remove the dependency array.",["133"],"React Hook useEffect has missing dependencies: 'player' and 'setStartGame'. Either include them or remove the dependency array. If 'setStartGame' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["134"],"React Hook useEffect has a missing dependency: 'player'. Either include it or remove the dependency array. If 'setBoard' needs the current value of 'player', you can also switch to useReducer instead of useState and read 'player' in the reducer.",["135"],"'pawnMove' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},"Update the dependencies array to be: [user, setWebSocket, webSocket, setDialogState, setUser, setNoti]",{"range":"150","text":"151"},"Update the dependencies array to be: [setUser, webSocket]",{"range":"152","text":"153"},"Update the dependencies array to be: [board, onDragEnd, selected, whereStoneCanGo]",{"range":"154","text":"155"},"Update the dependencies array to be: [board, mv, setLogs, setTurn]",{"range":"156","text":"157"},"Update the dependencies array to be: [setLogs, webSocket, whereStoneCanGo]",{"range":"158","text":"159"},"Update the dependencies array to be: [player, setStartGame, startGame]",{"range":"160","text":"161"},"Update the dependencies array to be: [player]",{"range":"162","text":"163"},[13457,13477],"[user, setWebSocket, webSocket, setDialogState, setUser, setNoti]",[14568,14570],"[setUser, webSocket]",[7457,7467],"[board, onDragEnd, selected, whereStoneCanGo]",[7877,7881],"[board, mv, setLogs, setTurn]",[8391,8417],"[setLogs, webSocket, whereStoneCanGo]",[8557,8568],"[player, setStartGame, startGame]",[8649,8651],"[player]"]